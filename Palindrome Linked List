/*
Given a singly linked list, determine if it is a palindrome.
The only algorithm figured out which has O(1) space and O(n) time is described as followed:
Use two pointers, of which the first one jumps two node in one loop, while the second one jumps one node in one loop.
When the first one reaches the end of or the last end of the linked list, the second one reaches the middle.(This a way you can get to the middle in one pass because you don't have to get the length of the linked list.) It costs O(n) time and O(1) space.
Then reverse half of the linked list from the middle, and it costs O(n) time and O(1) space.
Finally, check linked list simultaneously from the head and the middle. It costs O(n) time and O(1) space.
*/



public class Solution{
	public boolean isPalindrome(ListNode head){
		if(head == null || head.next == null)
			return true;
		ListNode p1 = head;
		ListNode p2 = head;
		while(p1.next != null && p1.next.next != null){
			p1 = p1.next.next;
			p2 = p2.next;
		}
		p2.next = reverse(p2.next);
		p1 = head;
		while(p2.next != null){
			p2 = p2.next;
			if(p1.val != p2.val)
				return false;
			p1 = p1.next;
		}
		return true;
		
			
	}
	ListNode reverse(ListNode head){
		ListNode pre = null;
		ListNode next = null;
		ListNode node = head;
		while(node != null){
			next = node.next;
			node.next = pre;
			pre = node;
			node = next;
		}
		return pre;
	}
}
